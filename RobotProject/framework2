#!/usr/bin/env python3
from ev3dev2.motor import LargeMotor, OUTPUT_B, OUTPUT_C, SpeedPercent, MoveTank
from ev3dev2.sound import Sound
from ev3dev2.sensor.lego import ColorSensor
import time

# s
mLeft = LargeMotor(OUTPUT_B)
mRight = LargeMotor(OUTPUT_C)
drive = MoveTank(OUTPUT_B, OUTPUT_C)


class GoalAgent:
    """The class for all goal agent methods and attributes."""

    def __init__(self):
        """Initiating method that sets starting position and angle."""
        # The field is approximately 12x12 squares, we can consider each square to be 10x10 unitsss
        # Using this, the bot starts at position [15, 100]
        self.cs = ColorSensor()
        self.xy = [15, 100]
        self.angle = 90
        self.current_square = None
        self.goal_found = False
        self.squares_past = 0
        self.counter = 0
        self.loop = 0
        self.t1 = 0
        self.t2 = 0
        self.t3 = 0
        self.sub_counter = 0
        self.deg_per_loop = 0
        self.final_count = 0
        self.rotation_data = []

    def calibrate_forward(self):
        if self.counter == 0:
            while self.cs.reflected_light_intensity < 15:
                print(f'xy: {self.xy}, color: {self.cs.reflected_light_intensity}, action: forward')
                drive.on_for_rotations(SpeedPercent(10), SpeedPercent(10), 0.01)
            print(f"color: {self.cs.reflected_light_intensity}: past first black")
            self.counter += 1
            time.sleep(5)
        elif self.counter == 1:
            while self.cs.reflected_light_intensity > 21:
                print(f'xy: {self.xy}, color: {self.cs.reflected_light_intensity}, action: forward')
                drive.on_for_rotations(SpeedPercent(10), SpeedPercent(10), 0.01)
            print(f"color: {self.cs.reflected_light_intensity}: past first white")
            self.counter += 1
            time.sleep(5)
        elif self.counter == 2:
            while self.cs.reflected_light_intensity < 21:
                print(f'xy: {self.xy}, color: {self.cs.reflected_light_intensity}, action: forward')
                drive.on_for_rotations(SpeedPercent(10), SpeedPercent(10), 0.01)
                self.loop += 1
            print(f"color: {self.cs.reflected_light_intensity}: past second black, loops: {self.loop}")
            self.counter += 1
            time.sleep(5)

    def calibrate_rotation(self, set):
        if self.sub_counter == 0:
            while self.cs.reflected_light_intensity > 20:
                print(f'xy: {self.xy}, color: {self.cs.reflected_light_intensity}, action: cw')
                drive.on_for_rotations(SpeedPercent(10), SpeedPercent(-10), 0.01)
                self.t1 += 1
            print(f"color: {self.cs.reflected_light_intensity} t1 loops: {self.t1}")
            time.sleep(3)
            while self.cs.reflected_light_intensity < 21:
                print(f'xy: {self.xy}, color: {self.cs.reflected_light_intensity}, action: cw')
                drive.on_for_rotations(SpeedPercent(10), SpeedPercent(-10), 0.01)
                self.t2 += 1
            print(f"color: {self.cs.reflected_light_intensity} t2 loops: {self.t2}")
            time.sleep(3)
            self.sub_counter += 1
        elif self.sub_counter == 1:
            while self.cs.reflected_light_intensity > 20:
                print(f'xy: {self.xy}, color: {self.cs.reflected_light_intensity}, action: cw')
                drive.on_for_rotations(SpeedPercent(10), SpeedPercent(-10), 0.01)
                self.t3 += 1
            print(f"color: {self.cs.reflected_light_intensity} t3 loops: {self.t3}")
            time.sleep(3)
            self.sub_counter += 1
            print(
                f"Overview: vertical loops = {self.loop}, t1 loops = {self.t1}, t2 loops = {self.t2}, t3 loops = {self.t3}")
            if set == 'one':
                self.deg_per_loop = 315 / (self.t1 + self.t2 + self.t3)
                print(f"t1 + t2 + t3 = 315 degrees, therefore, each loop represents {self.deg_per_loop} degrees")
                print(
                    f"Therefore {45 / self.deg_per_loop} loops are required to get back to centre. Initiating rotation phase 2")
                time.sleep(1)
                drive.on_for_rotations(SpeedPercent(10), SpeedPercent(-10), 0.01)
                self.rotation_data.append(self.deg_per_loop)
                self.sub_counter = 0
                self.t1 = 0
                self.t2 = 0
                self.t3 = 0
            elif set == 'two':
                self.deg_per_loop = 360 / (self.t1 + self.t2 + self.t3)
                print(f"t1 + t2 + t3 = 360 degrees, therefore, each loop represents {self.deg_per_loop} degrees")
                print(
                    f"Therefore {45 / self.deg_per_loop} loops are required to get back to centre. Initiating rotation phase 2")
                time.sleep(1)
                drive.on_for_rotations(SpeedPercent(10), SpeedPercent(-10), 0.01)
                self.rotation_data.append(self.deg_per_loop)
                self.sub_counter = 0
                self.t1 = 0
                self.t2 = 0
                self.t3 = 0

    def rule(self, override=None):
        if override:
            if override == "calibrate":
                return "calibrate"
        else:
            print(self.xy)
            if self.cs.reflected_light_intensity >= 35:
                return self.decision()
            elif self.xy >= [10, 90]:
                print(f'forward 1, color: {self.cs.reflected_light_intensity}')
                return "forward 1"

    def decision(self):
        if self.squares_past == 0:
            self.squares_past += 1
            return "cw_90"

    def action(self, rule):
        if rule == "forward 1":
            drive.on_for_rotations(SpeedPercent(10), SpeedPercent(10), 0.5)
            self.xy[1] += 5
        if rule == "cw_90":
            drive.on_for_rotations(SpeedPercent(10), SpeedPercent(-10), 0.52)

    def transition_model(self, speed1, speed2, rotation, action_type):
        """Transition model method that updates state values based on actions performed."""
        # Note that updating is not instant, but each action should be done with a small time step to make it seem so.
        # Placeholder algorithm values.
        if action_type == 'rotations':
            self.xy[0] = rotation * 2
        elif action_type == 'spin':
            if speed1 > 0:
                self.angle = (self.angle + rotation) % 360
            else:
                self.angle = (self.angle - rotation)

    def xy_square_conversion(self, light_input):
        """Conversion method that converts current xy position to current black square position."""
        square = self.xy[0] + self.xy[1] % 12
        return square

    def sensor_model(self, light_intensity_input):
        """Sensor model method that updates current world state based on agent percepts."""
        # Note that the best sensor model will compare current square values to previous ones.
        # Placeholder algorithm values.
        if light_intensity_input <= 50:
            self.current_square = self.xy[0] + self.xy[1] % 12
        else:
            self.current_square = None

    """def rules(self):
        #Rules method that decides actions based on current world state
        if self.xy = [0, 0]:
            action = #move to red zone
        else if self.xy = #in red zone:
            action = #search for tower
    #
    def action(self, action_step):
        action_list.append(action_step)"""

    def update_state(self, speed1, speed2, rotations, action_type):
        if action_type == 'rotations':
            self.transition_model(speed1, speed2, rotations, action_type)
            print(self.xy)
        elif action_type == 'spin':
            self.transition_model(speed1, speed2, rotations, action_type)
            print(self.angle)

    def move(self, action_type, speed1, speed2=1, rotations=1, rotation_angle=None):
        if action_type == 'rotations':
            drive.on_for_rotations(SpeedPercent(speed1), SpeedPercent(speed2), rotations)
            self.update_state(speed1, speed2, rotations, action_type)
        if action_type == 'spin':
            drive.on_for_rotations(SpeedPercent(speed1), SpeedPercent(-speed1), rotations)
            self.update_state(speed1, speed2, rotations, action_type)
        # if action_type == 'rotate_for':sssss

    def right(self):
        drive.on_for_rotations(13, 0, 0.95)
        self.straight_backward(0.525)
        return

    def straight_backward(self, rots):
        drive.on_for_rotations(-10, -10, rots)

    def left(self):
        drive.on_for_rotations(0, 13, 0.95)
        self.straight_backward(0.525)

        return

    def straight_horizontal_one_tile(self):
        drive.on_for_rotations(20, 20, 1.18)

    def straight_vertical_one_tile(self):
        drive.on_for_rotations(20, 19, 0.975)

    def var_forward(self, value):
        drive.on_for_rotations(20, 20, value)
